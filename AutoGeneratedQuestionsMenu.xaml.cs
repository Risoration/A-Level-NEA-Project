using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MySql.Data;
using System.Data;
using MySql.Data.MySqlClient;
using System.Text.RegularExpressions;

namespace NEA___Boolean_and_Binary_Algebra_Revision_Tool
{
    /// <summary>
    /// Interaction logic for AutoGeneratedQuestionsMenu.xaml
    /// </summary>
    public partial class AutoGeneratedQuestionsMenu : Page
    {
        #region variable declarations
        /// <summary>
        /// all variables I will need to generate the questions
        /// </summary>
        //private string questionType;
        //private int questionDifficulty;
        //private string questionSuccess;
        //private string questionDCreation;
        //private string questionDAttempt;
        #endregion

        #region SQL declarations
        /// <summary>
        /// SQL connectivity variables necessary to fetch the elements of the questions I will be generating
        /// </summary>
        private static string connectionString = "SERVER=localhost; DATABASE=revisiontooldbschema;UID=c_lykoudis;PASSWORD=Stratigosathan210;";
        private static MySqlConnection connection = new MySqlConnection(connectionString);
        #endregion
        public AutoGeneratedQuestionsMenu()
        {
            InitializeComponent();
        }
        #region navigation methods
        private void AutoGeneratedQuestionsMenu_ReturnMainButton_Click(object sender, RoutedEventArgs e)
        {
            NavigationService.Navigate(new MainMenu());
        }

        private void AutoGeneratedQuestionsMenu_HelpButton_Click(object sender, RoutedEventArgs e)
        {
            NavigationService.Navigate(new AutoGeneratedQuestionsMenu_HelpPage());
        }
        #endregion

        #region question generation
        public List<char> FetchOperators(string questionType, RoutedEventArgs e, MySqlConnection sqlConnection) //method to fetch all the operands to generate a question
        {
            DataTable dataTable = new DataTable(); //initialise a datatable
            List<char> variableList = new List<char>(); //initialise a list of all the operands
            if(questionType == "Binary") //if the question to be generated is a binary question
            {
                MySqlCommand binaryoperandcommand = new MySqlCommand("SELECT BinEl_Elements " +
                                                                     "FROM binaryelements " +
                                                                     "WHERE BinEl_Type = &;quotBinDigit&;quot",
                                                                   sqlConnection); //defines the SQL query command to be ran in this case
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter(); //define the adapter to load the results of the query onto the datatable
                dataTable.Load(binaryoperandcommand.ExecuteReader()); //load the data fetched by the command onto the data table
                dataAdapter.Fill(dataTable); //refreshes cells to match the equivalent in the data source
                foreach(DataRow data in dataTable.Rows)
                {
                    variableList.Add((char)data[1]); //adds all the pieces of data in the second column into the list of operands
                }
            }
            else if (questionType  == "Boolean") //if the question to be generated is a boolean question
            {
                MySqlCommand booleanoperandcommand = new MySqlCommand("SELECT BoolEl_Elements" +
                                                                      "FROM booleanelements" +
                                                                      "WHERE BoolEl_Type = &;quotBoolDigit&;quot", 
                                                                       sqlConnection);
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter();
                dataTable.Load(booleanoperandcommand.ExecuteReader()); 
                dataAdapter.Fill(dataTable);
                foreach(DataRow data in dataTable.Rows)
                {
                    variableList.Add((char)data[1]);
                }
            }
            return variableList;
        }
        private List<char> FetchOperators(string questionType, MySqlConnection sqlConnection)
        {
            DataTable dataTable = new DataTable();
            List<char> operatorList = new List<char>();
            if (questionType == "Binary") 
            {
                MySqlCommand binaryoperatorcommand = new MySqlCommand("SELECT BinEl_Elements" +
                                                                      "FROM binaryelements" +
                                                                      "WHERE BinEl_Type = &;quotOperator&;quot", 
                                                                      sqlConnection);
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter();
                dataTable.Load(binaryoperatorcommand.ExecuteReader()); 
                dataAdapter.Fill(dataTable); 
                foreach (DataRow data in dataTable.Rows)
                {
                    operatorList.Add((char)data[1]);
                }
            }
            else if (questionType == "Boolean")
            {
                MySqlCommand booleanoperatorcommand = new MySqlCommand("SELECT BoolEl_Elements FROM booleanelements WHERE BoolEl_Type = &;quotOperator&;quot", sqlConnection);
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter();
                dataTable.Load(booleanoperatorcommand.ExecuteReader());
                dataAdapter.Fill(dataTable);
                foreach (DataRow data in dataTable.Rows)
                {
                    operatorList.Add((char)data[1]);
                }
            }
            return operatorList;
        }

        private string QuestionGen(int questionDifficulty, List<string> listOfVariables, List<string> listOfOperators) //method to generate a question 
        {
            //initialise variables to be used in the generation of the question
            List<string> generatedQuestionArray = new List<string>(); //the array of characters which will make up the generated question
            string generatedQuestion = string.Join(",", generatedQuestionArray); //string variable which will hold the question itself after it is fully generated
            int operatorsUsed = 0; //integer value to control the number of operators used 
            while (operatorsUsed < questionDifficulty)
            {
                for (int i = 0; i < listOfVariables.Count; i++)
                {
                    generatedQuestionArray.Add(listOfVariables[i]);
                    generatedQuestionArray.Add(listOfVariables[i + 1]);
                    generatedQuestionArray.Add(listOfOperators[i]);
                }
            }
            return generatedQuestion;
        }


        #endregion
    }
}